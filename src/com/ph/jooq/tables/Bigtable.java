/**
 * This class is generated by jOOQ
 */
package com.ph.jooq.tables;


import com.ph.jooq.Public;
import com.ph.jooq.tables.records.BigtableRecord;

import java.math.BigDecimal;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.7.0"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Bigtable extends TableImpl<BigtableRecord> {

	private static final long serialVersionUID = 796814494;

	/**
	 * The reference instance of <code>public.bigtable</code>
	 */
	public static final Bigtable BIGTABLE = new Bigtable();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<BigtableRecord> getRecordType() {
		return BigtableRecord.class;
	}

	/**
	 * The column <code>public.bigtable.id</code>.
	 */
	public final TableField<BigtableRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER, this, "");

	/**
	 * The column <code>public.bigtable.name</code>.
	 */
	public final TableField<BigtableRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR.length(1024), this, "");

	/**
	 * The column <code>public.bigtable.age</code>.
	 */
	public final TableField<BigtableRecord, Integer> AGE = createField("age", org.jooq.impl.SQLDataType.INTEGER, this, "");

	/**
	 * The column <code>public.bigtable.money</code>.
	 */
	public final TableField<BigtableRecord, BigDecimal> MONEY = createField("money", org.jooq.impl.SQLDataType.NUMERIC.precision(6, 2), this, "");

	/**
	 * Create a <code>public.bigtable</code> table reference
	 */
	public Bigtable() {
		this("bigtable", null);
	}

	/**
	 * Create an aliased <code>public.bigtable</code> table reference
	 */
	public Bigtable(String alias) {
		this(alias, BIGTABLE);
	}

	private Bigtable(String alias, Table<BigtableRecord> aliased) {
		this(alias, aliased, null);
	}

	private Bigtable(String alias, Table<BigtableRecord> aliased, Field<?>[] parameters) {
		super(alias, Public.PUBLIC, aliased, parameters, "");
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Bigtable as(String alias) {
		return new Bigtable(alias, this);
	}

	/**
	 * Rename this table
	 */
	public Bigtable rename(String name) {
		return new Bigtable(name, null);
	}
}
